//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/1_MyStuff/FPS_Movement/NewInputManager/FPSInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @FPSInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @FPSInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""FPSInputActions"",
    ""maps"": [
        {
            ""name"": ""FPSActionMap"",
            ""id"": ""67d5f8ef-51d1-41fd-9131-25e0672e6cbb"",
            ""actions"": [
                {
                    ""name"": ""FPSMovementAction"",
                    ""type"": ""Value"",
                    ""id"": ""c4a737a9-0c92-43f3-bf8c-3c03b5b1b600"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FPSJumpAction"",
                    ""type"": ""Button"",
                    ""id"": ""2d8b6b9a-82ec-4305-9454-63b6f75a3131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FPSLookAction"",
                    ""type"": ""PassThrough"",
                    ""id"": ""12aeeabc-d469-48e8-ad62-fcc8353b1983"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5592e1f9-e137-4e02-9f4e-65e6fe110098"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPSMovementAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2c5ce57f-d13a-411d-917a-4c738da55ae3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPSMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19525059-21d7-4d2f-ace2-c7bd7bff2acc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPSMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aac9e68b-7dce-4372-b4de-4bf0d7c01b43"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPSMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""19135e50-d755-4f97-a7a3-d1493f675ac5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPSMovementAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""fb4a24a9-1aa2-4d19-893a-801a40ed98b3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPSJumpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ff18261c-0937-41a8-8d42-43461b80a891"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FPSLookAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // FPSActionMap
        m_FPSActionMap = asset.FindActionMap("FPSActionMap", throwIfNotFound: true);
        m_FPSActionMap_FPSMovementAction = m_FPSActionMap.FindAction("FPSMovementAction", throwIfNotFound: true);
        m_FPSActionMap_FPSJumpAction = m_FPSActionMap.FindAction("FPSJumpAction", throwIfNotFound: true);
        m_FPSActionMap_FPSLookAction = m_FPSActionMap.FindAction("FPSLookAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FPSActionMap
    private readonly InputActionMap m_FPSActionMap;
    private List<IFPSActionMapActions> m_FPSActionMapActionsCallbackInterfaces = new List<IFPSActionMapActions>();
    private readonly InputAction m_FPSActionMap_FPSMovementAction;
    private readonly InputAction m_FPSActionMap_FPSJumpAction;
    private readonly InputAction m_FPSActionMap_FPSLookAction;
    public struct FPSActionMapActions
    {
        private @FPSInputActions m_Wrapper;
        public FPSActionMapActions(@FPSInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @FPSMovementAction => m_Wrapper.m_FPSActionMap_FPSMovementAction;
        public InputAction @FPSJumpAction => m_Wrapper.m_FPSActionMap_FPSJumpAction;
        public InputAction @FPSLookAction => m_Wrapper.m_FPSActionMap_FPSLookAction;
        public InputActionMap Get() { return m_Wrapper.m_FPSActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FPSActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IFPSActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_FPSActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FPSActionMapActionsCallbackInterfaces.Add(instance);
            @FPSMovementAction.started += instance.OnFPSMovementAction;
            @FPSMovementAction.performed += instance.OnFPSMovementAction;
            @FPSMovementAction.canceled += instance.OnFPSMovementAction;
            @FPSJumpAction.started += instance.OnFPSJumpAction;
            @FPSJumpAction.performed += instance.OnFPSJumpAction;
            @FPSJumpAction.canceled += instance.OnFPSJumpAction;
            @FPSLookAction.started += instance.OnFPSLookAction;
            @FPSLookAction.performed += instance.OnFPSLookAction;
            @FPSLookAction.canceled += instance.OnFPSLookAction;
        }

        private void UnregisterCallbacks(IFPSActionMapActions instance)
        {
            @FPSMovementAction.started -= instance.OnFPSMovementAction;
            @FPSMovementAction.performed -= instance.OnFPSMovementAction;
            @FPSMovementAction.canceled -= instance.OnFPSMovementAction;
            @FPSJumpAction.started -= instance.OnFPSJumpAction;
            @FPSJumpAction.performed -= instance.OnFPSJumpAction;
            @FPSJumpAction.canceled -= instance.OnFPSJumpAction;
            @FPSLookAction.started -= instance.OnFPSLookAction;
            @FPSLookAction.performed -= instance.OnFPSLookAction;
            @FPSLookAction.canceled -= instance.OnFPSLookAction;
        }

        public void RemoveCallbacks(IFPSActionMapActions instance)
        {
            if (m_Wrapper.m_FPSActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFPSActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_FPSActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FPSActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FPSActionMapActions @FPSActionMap => new FPSActionMapActions(this);
    public interface IFPSActionMapActions
    {
        void OnFPSMovementAction(InputAction.CallbackContext context);
        void OnFPSJumpAction(InputAction.CallbackContext context);
        void OnFPSLookAction(InputAction.CallbackContext context);
    }
}
