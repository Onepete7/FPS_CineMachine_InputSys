//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/1_MyStuff/My_UnityChan/NewInputSystem/UnityChanInputManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UnityChanInputManager: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UnityChanInputManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UnityChanInputManager"",
    ""maps"": [
        {
            ""name"": ""UnityChanActionMap"",
            ""id"": ""f1b6d289-8ac5-4ae8-9bda-38dd9f49ce28"",
            ""actions"": [
                {
                    ""name"": ""UnityChanMoveAction"",
                    ""type"": ""Value"",
                    ""id"": ""ff65b5cb-ea79-4734-938e-6a98d0403699"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UnityChanRunAction"",
                    ""type"": ""Button"",
                    ""id"": ""a3826dbe-0644-4245-b39a-71a95d5d64a7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UnityChanLookAction"",
                    ""type"": ""Value"",
                    ""id"": ""c96c3523-a242-48f4-ae30-f05cf4fe1c0f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UnityChanJumpAction"",
                    ""type"": ""Button"",
                    ""id"": ""92ae2fdf-144f-48e2-9a67-c62d1935a045"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d88a3a82-f9c2-4ad5-ae15-a62eda414cd9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanMoveAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7685d3eb-7709-4c5f-a92b-1f325727aef4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanMoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8a253d6e-641e-43e3-b315-27cebf7733ae"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanMoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e5f6124e-5087-4214-8f0e-0ef8a2728728"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanMoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""104967ba-cf94-47ca-8900-313c3e99070c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanMoveAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0245b2bd-05b4-43c8-a55a-37d165ab4bca"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanRunAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48ce0737-838e-4539-ad51-8f0a74ef50f5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanLookAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""672f5a14-64e4-4aa0-9a7f-886d83400e0e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnityChanJumpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UnityChanActionMap
        m_UnityChanActionMap = asset.FindActionMap("UnityChanActionMap", throwIfNotFound: true);
        m_UnityChanActionMap_UnityChanMoveAction = m_UnityChanActionMap.FindAction("UnityChanMoveAction", throwIfNotFound: true);
        m_UnityChanActionMap_UnityChanRunAction = m_UnityChanActionMap.FindAction("UnityChanRunAction", throwIfNotFound: true);
        m_UnityChanActionMap_UnityChanLookAction = m_UnityChanActionMap.FindAction("UnityChanLookAction", throwIfNotFound: true);
        m_UnityChanActionMap_UnityChanJumpAction = m_UnityChanActionMap.FindAction("UnityChanJumpAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UnityChanActionMap
    private readonly InputActionMap m_UnityChanActionMap;
    private List<IUnityChanActionMapActions> m_UnityChanActionMapActionsCallbackInterfaces = new List<IUnityChanActionMapActions>();
    private readonly InputAction m_UnityChanActionMap_UnityChanMoveAction;
    private readonly InputAction m_UnityChanActionMap_UnityChanRunAction;
    private readonly InputAction m_UnityChanActionMap_UnityChanLookAction;
    private readonly InputAction m_UnityChanActionMap_UnityChanJumpAction;
    public struct UnityChanActionMapActions
    {
        private @UnityChanInputManager m_Wrapper;
        public UnityChanActionMapActions(@UnityChanInputManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnityChanMoveAction => m_Wrapper.m_UnityChanActionMap_UnityChanMoveAction;
        public InputAction @UnityChanRunAction => m_Wrapper.m_UnityChanActionMap_UnityChanRunAction;
        public InputAction @UnityChanLookAction => m_Wrapper.m_UnityChanActionMap_UnityChanLookAction;
        public InputAction @UnityChanJumpAction => m_Wrapper.m_UnityChanActionMap_UnityChanJumpAction;
        public InputActionMap Get() { return m_Wrapper.m_UnityChanActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UnityChanActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IUnityChanActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_UnityChanActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UnityChanActionMapActionsCallbackInterfaces.Add(instance);
            @UnityChanMoveAction.started += instance.OnUnityChanMoveAction;
            @UnityChanMoveAction.performed += instance.OnUnityChanMoveAction;
            @UnityChanMoveAction.canceled += instance.OnUnityChanMoveAction;
            @UnityChanRunAction.started += instance.OnUnityChanRunAction;
            @UnityChanRunAction.performed += instance.OnUnityChanRunAction;
            @UnityChanRunAction.canceled += instance.OnUnityChanRunAction;
            @UnityChanLookAction.started += instance.OnUnityChanLookAction;
            @UnityChanLookAction.performed += instance.OnUnityChanLookAction;
            @UnityChanLookAction.canceled += instance.OnUnityChanLookAction;
            @UnityChanJumpAction.started += instance.OnUnityChanJumpAction;
            @UnityChanJumpAction.performed += instance.OnUnityChanJumpAction;
            @UnityChanJumpAction.canceled += instance.OnUnityChanJumpAction;
        }

        private void UnregisterCallbacks(IUnityChanActionMapActions instance)
        {
            @UnityChanMoveAction.started -= instance.OnUnityChanMoveAction;
            @UnityChanMoveAction.performed -= instance.OnUnityChanMoveAction;
            @UnityChanMoveAction.canceled -= instance.OnUnityChanMoveAction;
            @UnityChanRunAction.started -= instance.OnUnityChanRunAction;
            @UnityChanRunAction.performed -= instance.OnUnityChanRunAction;
            @UnityChanRunAction.canceled -= instance.OnUnityChanRunAction;
            @UnityChanLookAction.started -= instance.OnUnityChanLookAction;
            @UnityChanLookAction.performed -= instance.OnUnityChanLookAction;
            @UnityChanLookAction.canceled -= instance.OnUnityChanLookAction;
            @UnityChanJumpAction.started -= instance.OnUnityChanJumpAction;
            @UnityChanJumpAction.performed -= instance.OnUnityChanJumpAction;
            @UnityChanJumpAction.canceled -= instance.OnUnityChanJumpAction;
        }

        public void RemoveCallbacks(IUnityChanActionMapActions instance)
        {
            if (m_Wrapper.m_UnityChanActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUnityChanActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_UnityChanActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UnityChanActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UnityChanActionMapActions @UnityChanActionMap => new UnityChanActionMapActions(this);
    public interface IUnityChanActionMapActions
    {
        void OnUnityChanMoveAction(InputAction.CallbackContext context);
        void OnUnityChanRunAction(InputAction.CallbackContext context);
        void OnUnityChanLookAction(InputAction.CallbackContext context);
        void OnUnityChanJumpAction(InputAction.CallbackContext context);
    }
}
